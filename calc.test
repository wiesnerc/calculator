#!/bin/sh

# Copyright (C) 2005-2012 Free Software Foundation, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# These 1st 2 tests were from the bison mfcalc example...
cat >input <<EOF
1+2*3
EOF
run 0 7

cat >input <<EOF
(1+2) * 3
EOF
run 0 9
#run 0 9 -p

# Subtraction and division ---------------------------------------------------
cat >input <<EOF
8 - 4 / 4
EOF
run 0 7

cat >input <<EOF
(8 - 4) / 4
EOF
run 0 1

cat >input <<EOF
4/0
EOF
run 1 ''	# Divide by zero not allowed

cat >input <<EOF
5%4
EOF
run 0 1

cat >input <<EOF
5%0
EOF
run 1 ''	# Divide by zero not allowed

# Minus (unary) and exponential ----------------------------------------------
cat >input <<EOF
-2^2
EOF
run 0 -4

cat >input <<EOF
(-2)^2
EOF
run 0 4

cat >input <<EOF
2^2^2^2
EOF
run 0 256	# calc is left associative, equiv to ((2^2)^2)^2 .. 16^2 = 256

cat >input <<EOF
2^(2^(2^2))
EOF
run 0 65536     # to get right associative need parentheses .. 2^16 = 65536

cat >input <<EOF
2^-2
EOF
run 0 0.25	# 2^-2 = 1/2^2 = 1/4

cat >input <<EOF
1/2^-2
EOF
run 0 4		# 1/2^-2 = 1/(1/2^2) = 1/(1/4) = 4

# Factorial ------------------------------------------------------------------
cat >input <<EOF
4!
EOF
run 0 24

cat >input <<EOF
4.1!
EOF
run 1 ''	# factorial of non-integer not allowed

cat >input <<EOF
(-4)!
EOF
run 1 ''	# factorial of negative not allowed

# Variables and constants ----------------------------------------------------
cat >input <<EOF
pi
EOF
run 0 3.141592654

cat >input <<EOF
e
EOF
run 0 2.718281828

cat >input <<EOF
m
EOF
run 1 ''	# variable not defined

cat >input <<EOF
m=7
EOF
run 0 7		# assign value

cat >input <<EOF
m=pi*2
cos(m)
EOF
run 0 1		# use value

# Functions ------------------------------------------------------------------
cat >input <<EOF
abs(-1)
EOF
run 0 1

cat >input <<EOF
sin(pi/2)
EOF
run 0 1

cat >input <<EOF
cos(0)
EOF
run 0 1

cat >input <<EOF
tan(pi/4)
EOF
run 0 1

cat >input <<EOF
asin(1)
EOF
run 0 1.570796327	# pi/2 = asin(1)

cat >input <<EOF
acos(1)
EOF
run 0 0			#    0 = acos(1)

cat >input <<EOF
atan(1)
EOF
run 0 0.7853981634	# pi/4 = atan(1)

cat >input <<EOF
sqrt(9)
EOF
run 0 3

cat >input <<EOF
exp(2)
EOF
run 0 7.389056099	# exp(2) = e^2

cat >input <<EOF
expm1(2)
EOF
run 0 6.389056099	# expm1(2) = e^2 - 1

cat >input <<EOF
exp2(2)
EOF
run 0 4

cat >input <<EOF
ln(e)
EOF
run 0 1

cat >input <<EOF
ln1p(e-1)
EOF
run 0 1			# ln(1 + x) = 1, when x = (e-1)

cat >input <<EOF
log(10)
EOF
run 0 1

cat >input <<EOF
log2(2)
EOF
run 0 1

cat >input <<EOF
trunc(1.5)
EOF
run 0 1

cat >input <<EOF
ceil(1.5)
EOF
run 0 2

cat >input <<EOF
floor(1.5)
EOF
run 0 1

cat >input <<EOF
round(1.5)
EOF
run 0 2

# Should not work ------------------------------------------------------------
cat >input <<EOF
sin(pi/2) cos(0)
EOF
run 1 ''

cat >input <<EOF
sin[0]
EOF
run 1 ''

# Just for fun ---------------------------------------------------------------
cat >input <<EOF
-sin(ln((3*4+1/2 - 3! + 2*1/4) % 3 * e) * pi /2 * 3) - 1
EOF
run 0 0
